import pytest
import requests
import os
import allure
from dotenv import load_dotenv

load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv('KINOPOISK_API_KEY', 'GGTYBTW-0VB4NX1-G4REM52-0Y8V7Y6')


@pytest.fixture(scope='session')
def api_client():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è API –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
    session = requests.Session()
    session.headers.update({
        "X-API-KEY": API_KEY,
        "accept": "application/json"
    })
    return session


@allure.feature("API Tests")
@allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def test_api_key_valid(api_client):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞"""
    with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞"):
        response = api_client.get(
            "https://api.kinopoisk.dev/v1.4/movie",
            params={"limit": 1}
        )

    allure.attach(
        f"Status Code: {response.status_code}", name="Response Status")
    allure.attach(
        f"Response: {response.text[:200]}...", name="Response Preview")

    print(f"Status Code: {response.status_code}")
    print(f"Response: {response.text[:200]}...")

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞"):
        assert response.status_code == 200, f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}"
        assert "docs" in response.json(), "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á 'docs'"

    print("‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω!")
    allure.attach("‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω!", name="Result")


@allure.feature("API Tests")
@allure.title("–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ '–®–∫–æ–ª–∞'")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
def test_api_search_school(api_client):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –®–∫–æ–ª—ã —á–µ—Ä–µ–∑ API"""
    with allure.step("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ '–®–∫–æ–ª–∞'"):
        print("üîç –ò—â–µ–º –®–∫–æ–ª—É...")

        response = api_client.get(
            "https://api.kinopoisk.dev/v1.4/movie/search",
            params={"query": "–®–∫–æ–ª–∞", "limit": 10}
        )

    allure.attach(f"Status: {response.status_code}", name="Search Status")
    print(f"Status: {response.status_code}")

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"):
        assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}"

    data = response.json()
    movies = data.get('docs', [])

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"):
        assert len(movies) > 0, "–§–∏–ª—å–º '–®–∫–æ–ª–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∏–ª—å–º
    found = False
    found_movie = None
    for movie in movies:
        if "—à–∫–æ–ª–∞" in movie.get('name', '').lower() and movie.get('year') == 2010:
            found = True
            found_movie = movie
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {movie['name']} ({movie.get('year', 'N/A')})")
            break

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞"):
        assert found, "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º '–®–∫–æ–ª–∞' 2010 –≥–æ–¥–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"
        if found_movie:
            allure.attach(
                f"–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∏–ª—å–º: {found_movie['name']} ({found_movie.get('year', 'N/A')})", 
                name="Found Movie"
            )


@allure.feature("API Tests")
@allure.title("–ü–æ–∏—Å–∫ –≤—ã—Å–æ–∫–æ—Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 8+")
def test_api_high_rated_movies(api_client):
    """–¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ—Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ API"""
    with allure.step("–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º"):
        print("‚≠ê –ò—â–µ–º —Ñ–∏–ª—å–º—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º...")

        response = api_client.get(
            "https://api.kinopoisk.dev/v1.4/movie",
            params={
                "rating.kp": "8-10",
                "sortField": "rating.kp",
                "sortType": "-1",
                "limit": 5
            }
        )

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"):
        assert response.status_code == 200

    data = response.json()
    movies = data.get('docs', [])

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"):
        assert len(movies) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    movie_ratings = []
    for movie in movies:
        rating = movie.get('rating', {}).get('kp', 0)
        movie_ratings.append(f"{movie.get('name')}: {rating}")
        with allure.step(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ñ–∏–ª—å–º–∞ {movie.get('name')}"):
            assert rating >= 8.0, f"–§–∏–ª—å–º {movie.get('name')} –∏–º–µ–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ {rating} < 8.0"

    allure.attach("\n".join(movie_ratings), name="Movies with ratings ‚â• 8.0")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(movies)} —Ñ–∏–ª—å–º–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º ‚â• 8.0")


@allure.feature("API Tests")
@allure.title("–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≥–æ–¥—É")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ 2023 –≥–æ–¥–∞")
def test_api_movies_by_year(api_client):
    """–¢–µ—Å—Ç —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≥–æ–¥—É —á–µ—Ä–µ–∑ API"""
    with allure.step("–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ 2023 –≥–æ–¥–∞"):
        print("üìÖ –ò—â–µ–º —Ñ–∏–ª—å–º—ã 2023 –≥–æ–¥–∞...")

        response = api_client.get(
            "https://api.kinopoisk.dev/v1.4/movie",
            params={"year": "2023", "limit": 5}
        )

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"):
        assert response.status_code == 200

    data = response.json()
    movies = data.get('docs', [])

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"):
        assert len(movies) > 0, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤ 2023 –≥–æ–¥–∞"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥
    movie_list = []
    for movie in movies:
        movie_list.append(f"{movie.get('name')} ({movie.get('year')})")
        with allure.step(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ {movie.get('name')}"):
            assert movie.get('year') == 2023, f"–§–∏–ª—å–º {movie.get('name')} –Ω–µ 2023 –≥–æ–¥–∞"

    allure.attach("\n".join(movie_list), name="Movies from 2023")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(movies)} —Ñ–∏–ª—å–º–æ–≤ 2023 –≥–æ–¥–∞")


@allure.feature("API Tests")
@allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ ID —Ñ–∏–ª—å–º–∞")
def test_api_movie_details(api_client):
    """–¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ"""
    with allure.step("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ"):
        print("üé¨ –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API endpoint –∏ ID —Ñ–∏–ª—å–º–∞ "–®–∫–æ–ª–∞"
        response = api_client.get(
            "https://api.kinopoisk.dev/v1.4/movie/493098"  # ID —Ñ–∏–ª—å–º–∞ "–®–∫–æ–ª–∞"
        )

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"):
        assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}"

    movie_data = response.json()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π —Ñ–∏–ª—å–º–∞"):
        assert movie_data.get('name') == "–®–∫–æ–ª–∞", f"–ù–∞–∑–≤–∞–Ω–∏–µ: {movie_data.get('name')}"
        assert movie_data.get('year') == 2010, f"–ì–æ–¥: {movie_data.get('year')}"
        assert movie_data.get('rating', {}).get('kp') >= 5.0  # –ü–æ–Ω–∏–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞

    allure.attach(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {movie_data.get('name')}", name="Movie Details")
    allure.attach(f"–ì–æ–¥: {movie_data.get('year')}", name="Movie Details")
    allure.attach(
        f"–†–µ–π—Ç–∏–Ω–≥: {movie_data.get('rating', {}).get('kp')}",
        name="Movie Details"
    )

    print(f"‚úÖ –î–µ—Ç–∞–ª–∏: {movie_data['name']} ({movie_data['year']})")


@allure.feature("API Tests")
@allure.title("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ API")
def test_api_pagination(api_client):
    """–¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ API"""
    with allure.step("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"):
        print("üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é...")

        response = api_client.get(
            "https://api.kinopoisk.dev/v1.4/movie",
            params={"page": 1, "limit": 2}
        )

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"):
        assert response.status_code == 200

    data = response.json()

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"):
        assert data['page'] == 1
        assert data['limit'] == 2
        assert len(data['docs']) == 2

    allure.attach(f"Page: {data['page']}", name="Pagination Info")
    allure.attach(f"Limit: {data['limit']}", name="Pagination Info")
    allure.attach(
        f"Documents count: {len(data['docs'])}", name="Pagination Info")

    print("‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")


if __name__ == "__main__":
    pytest.main(['-v', '-s', '--alluredir=allure-results'])