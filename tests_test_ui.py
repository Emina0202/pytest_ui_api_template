import os
import time

import allure
import pytest
from dotenv import load_dotenv
from selenium import webdriver
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.webdriver import WebDriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from typing import Generator, Any
from selenium.webdriver.support.ui import WebDriverWait

load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv('KINOPOISK_API_KEY', 'GGTYBTW-0VB4NX1-G4REM52-0Y8V7Y6')


@pytest.fixture(scope='function')
def browser() -> Generator[WebDriver, Any, None]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞."""
    chrome_options = Options()
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--window-size=1920,1080')
    chrome_options.add_argument(
        '--disable-blink-features=AutomationControlled')
    chrome_options.add_experimental_option(
        "excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)

    driver = webdriver.Chrome(options=chrome_options)
    driver.execute_script(
        "Object.defineProperty(navigator, 'webdriver', {get: () => undefined})"
    )
    driver.implicitly_wait(10)

    yield driver

    driver.quit()


def accept_cookies(browser: WebDriver) -> bool:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è cookies."""
    try:
        cookie_button = WebDriverWait(browser, 5).until(
            EC.element_to_be_clickable((
                By.XPATH,
                "//button[contains(text(), '–ü—Ä–∏–Ω—è—Ç—å') or "
                "contains(text(), 'Accept') or contains(text(), '–°–æ–≥–ª–∞—Å–µ–Ω')]"
            ))
        )
        cookie_button.click()
        print("‚úÖ Cookies –ø—Ä–∏–Ω—è—Ç—ã")
        time.sleep(1)
        return True
    except Exception:
        print("‚ö† –û–∫–Ω–æ cookies –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å")
        return False


@allure.feature("UI Tests - Kinopoisk")
@allure.title("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞")
@allure.description(
    "–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –∏"
    "–Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
)
def test_ui_main_page_load(browser: WebDriver) -> None:
    """UI —Ç–µ—Å—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞."""

    with allure.step("–û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞"):
        print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞...")
        browser.get("https://www.kinopoisk.ru/")

        # –°–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        allure.attach(
            browser.get_screenshot_as_png(),
            name="main_page",
            attachment_type=allure.attachment_type.PNG
        )

    accept_cookies(browser)

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞"):
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
            logo_selectors = [
                "a[href*='kinopoisk.ru'] img",
                ".logo",
                "[class*='logo']",
                "svg[class*='logo']",
                "header img"
            ]

            logo = None
            for selector in logo_selectors:
                try:
                    elements = browser.find_elements(By.CSS_SELECTOR, selector)
                    if elements:
                        logo = elements[0]
                        break
                except Exception:
                    continue

            if logo and logo.is_displayed():
                print("‚úÖ –õ–æ–≥–æ—Ç–∏–ø –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω")
            else:
                # –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∏–º —Ö–æ—Ç—è –±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                assert "–ö–∏–Ω–æ–ø–æ–∏—Å–∫" in browser.title, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞"
                "–ö–∏–Ω–æ–ø–æ–∏—Å–∫"
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ title)")

        except Exception as e:
            allure.attach(
                browser.get_screenshot_as_png(),
                name="logo_check_error",
                attachment_type=allure.attachment_type.PNG
            )
            raise AssertionError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"):
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_selectors = [
                "input[type='text']",
                "input[placeholder*='–ø–æ–∏—Å–∫']",
                "input[placeholder*='—Ñ–∏–ª—å–º']",
                ".search-input",
                "[class*='search'] input",
                "form[role='search'] input"
            ]

            search_found = False
            for selector in search_selectors:
                try:
                    search_elements = browser.find_elements(
                        By.CSS_SELECTOR, selector
                    )
                    if search_elements and search_elements[0].is_displayed():
                        search_found = True
                        print(
                            f"""‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ (—Å–µ–ª–µ–∫—Ç–æ—Ä:
                            {selector})""")
                        break
                except Exception:
                    continue

            if not search_found:
                # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
                search_buttons = browser.find_elements(
                    By.CSS_SELECTOR, "button[type='submit'], .search-button"
                )
                if search_buttons:
                    print("‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    print("‚ö† –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞,"
                          "–Ω–æ —Ç–µ—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")

        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏: {str(e)}")

    print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")


@allure.feature("UI Tests - Kinopoisk")
@allure.title("–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ '–®–∫–æ–ª–∞' 2010 –≥–æ–¥–∞ —á–µ—Ä–µ–∑ UI")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑"
                    "–ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–∞–π—Ç–µ")
def test_ui_search_school_2010(browser: WebDriver) -> None:
    """UI —Ç–µ—Å—Ç: –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ '–®–∫–æ–ª–∞' 2010 –≥–æ–¥–∞."""

    with allure.step("–û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞"):
        browser.get("https://www.kinopoisk.ru/")
        time.sleep(3)

    accept_cookies(browser)

    with allure.step("–ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–∏—Å–∫–∞"):
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –Ω–µ–µ
            search_buttons = browser.find_elements(
                By.CSS_SELECTOR,
                "button[aria-label*='–ø–æ–∏—Å–∫'], button[type='submit'],"
                ".search-button, [class*='search'] button,"
                "svg[class*='search']"
            )

            if search_buttons:
                search_buttons[0].click()
                print("‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–∞—Ç–∞")
                time.sleep(2)
        except Exception:
            print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –≤–≤–æ–¥")

    with allure.step("–í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É"):
        try:
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            search_inputs = browser.find_elements(
                By.CSS_SELECTOR,
                "input[type='text']:focus, input[placeholder*='–ø–æ–∏—Å–∫'],"
                "input[placeholder*='—Ñ–∏–ª—å–º']"
            )

            if not search_inputs:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –≤—Å–µ input'—ã
                search_inputs = browser.find_elements(
                    By.CSS_SELECTOR, "input[type='text']"
                )

            if search_inputs:
                search_input = search_inputs[0]
                search_input.clear()
                search_input.send_keys("–®–∫–æ–ª–∞ 2010")
                search_input.send_keys(Keys.ENTER)
                print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤–≤–µ–¥–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                # –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
                browser.get("https://www.kinopoisk.ru/s/—à–∫–æ–ª–∞%202010/")
                print("‚úÖ –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞")

        except Exception as e:
            allure.attach(
                browser.get_screenshot_as_png(),
                name="search_input_error",
                attachment_type=allure.attachment_type.PNG
            )
            raise AssertionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫: {str(e)}")

    with allure.step("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"):
        try:
            WebDriverWait(browser, 15).until(
                EC.presence_of_element_located((
                    By.CSS_SELECTOR,
                    "h1, .title, [data-testid*='search'],"
                    ".search-results, .results"
                ))
            )
            time.sleep(3)

            allure.attach(
                browser.get_screenshot_as_png(),
                name="search_results",
                attachment_type=allure.attachment_type.PNG
            )
        except TimeoutException:
            # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π URL
            current_url = browser.current_url
            if "search" in current_url or "s/" in current_url:
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ø–æ URL)")
            else:
                allure.attach(
                    browser.get_screenshot_as_png(),
                    name="search_timeout",
                    attachment_type=allure.attachment_type.PNG
                )
                raise AssertionError("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∏–ª—å–º–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞"):
        page_source = browser.page_source.lower()
        if "—à–∫–æ–ª–∞" not in page_source and "2010" not in page_source:
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_title = browser.title.lower()
            if "—à–∫–æ–ª–∞" not in page_title and "2010" not in page_title:
                allure.attach(
                    browser.get_screenshot_as_png(),
                    name="search_results_content",
                    attachment_type=allure.attachment_type.PNG
                )
                raise AssertionError(
                    "–§–∏–ª—å–º '–®–∫–æ–ª–∞' 2010 –≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞"
                )

        print("‚úÖ –§–∏–ª—å–º '–®–∫–æ–ª–∞' 2010 –≥–æ–¥–∞ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")


@allure.feature("UI Tests - Kinopoisk")
@allure.title("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞ '–®–∫–æ–ª–∞' —á–µ—Ä–µ–∑ UI")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞")
def test_ui_open_movie_page(browser: WebDriver) -> None:
    """UI —Ç–µ—Å—Ç: –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞ '–®–∫–æ–ª–∞'."""

    with allure.step("–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞ '–®–∫–æ–ª–∞'"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π URL —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–∏—Å–∫–æ–º
        browser.get("https://www.kinopoisk.ru/film/468005/")
        time.sleep(5)

    accept_cookies(browser)

    with allure.step("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∏–ª—å–º–∞"):
        try:
            WebDriverWait(browser, 15).until(
                EC.presence_of_element_located((
                    By.CSS_SELECTOR,
                    "h1, .title, [data-testid*='title'], .film-title"
                ))
            )
            time.sleep(3)

            allure.attach(
                browser.get_screenshot_as_png(),
                name="movie_page",
                attachment_type=allure.attachment_type.PNG
            )
        except TimeoutException:
            allure.attach(
                browser.get_screenshot_as_png(),
                name="movie_page_timeout",
                attachment_type=allure.attachment_type.PNG
            )
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å–µ –∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            if "/film/468005" in browser.current_url:
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–∏–ª—å–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ø–æ URL)")
            else:
                raise AssertionError("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–∏–ª—å–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∏–ª—å–º–∞"):
        current_url = browser.current_url
        assert "/film/" in current_url, (
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞. URL: {current_url}"
        )
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞: {current_url}")

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞"):
        try:
            title_elements = browser.find_elements(
                By.CSS_SELECTOR,
                "h1, .title, [data-testid*='title'], .film-title, .movie-title"
            )

            if title_elements:
                movie_title = title_elements[0].text
                if movie_title:
                    print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {movie_title}")
                    allure.attach(
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {movie_title}", name="Movie Title"
                    )
                else:
                    # –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_title = browser.title
                    if page_title:
                        print(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_title}")
                    else:
                        print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ,"
                              "–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            else:
                print("‚ö† –≠–ª–µ–º–µ–Ω—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {str(e)}")

    print("‚úÖ –¢–µ—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


@allure.feature("UI Tests - Kinopoisk")
@allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é —Å–∞–π—Ç–∞")
def test_ui_navigation_menu(browser: WebDriver) -> None:
    """UI —Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é."""

    with allure.step("–û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞"):
        browser.get("https://www.kinopoisk.ru/")
        time.sleep(3)

    accept_cookies(browser)

    with allure.step("–ü–æ–∏—Å–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"):
        try:
            # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
            nav_selectors = [
                "[data-tid='navigation']",
                ".styles_root__nJLg5",  # –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                ".styles_navigation__item__",
                "nav[aria-label='–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è']",
                "a[href*='/films/']",
                "a[href*='/series/']", 
                "a[href*='/cartoons/']",
                "a[href*='/news/']",
                "a[href*='/lists/']",
                "a[href*='/channels/']"
            ]

            nav_elements_found = 0
            nav_texts = []
            found_elements = set()  # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

            for selector in nav_selectors:
                try:
                    elements = browser.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if element.is_displayed():
                            element_id = id(element)
                            if element_id not in found_elements:
                                found_elements.add(element_id)
                                nav_elements_found += 1
                                if element.text.strip():
                                    nav_texts.append(element.text.strip())
                except Exception:
                    continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
            expected_nav_items = ['–§–∏–ª—å–º—ã', '–°–µ—Ä–∏–∞–ª—ã', '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã', '–ù–æ–≤–æ—Å—Ç–∏', '–ü–æ–¥–±–æ—Ä–∫–∏']
            found_expected = any(item in ' '.join(nav_texts) for item in expected_nav_items)

            if nav_elements_found >= 3:  # –ú–∏–Ω–∏–º—É–º 3 –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {nav_elements_found} –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                if nav_texts:
                    unique_texts = list(set(nav_texts))[:8]  # –ë–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    print(f"‚úÖ –¢–µ–∫—Å—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {unique_texts}")
                    allure.attach("\n".join(unique_texts), name="Navigation Texts")
                
                if found_expected:
                    print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
                else:
                    print("‚ö† –û–∂–∏–¥–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            else:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                header_links = browser.find_elements(By.CSS_SELECTOR, "header a")
                main_links = browser.find_elements(By.CSS_SELECTOR, "main a, .root a")
                
                if len(header_links) > 5:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(header_links)} —Å—Å—ã–ª–æ–∫ –≤ header")
                elif len(main_links) > 10:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(main_links)} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
                else:
                    pytest.skip("–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞")

        except Exception as e:
            allure.attach(
                browser.get_screenshot_as_png(),
                name="navigation_error",
                attachment_type=allure.attachment_type.PNG
            )
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {str(e)}")
            # –ù–µ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


@allure.feature("UI Tests - Kinopoisk")
@allure.title("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '–§–∏–ª—å–º—ã –≤ –∫–∏–Ω–æ'")
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É"
                    "—Å —Ñ–∏–ª—å–º–∞–º–∏ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞—Ö")
def test_ui_movies_in_cinema(browser: WebDriver) -> None:
    """UI —Ç–µ—Å—Ç: –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–æ–≤ –≤ –∫–∏–Ω–æ."""

    with allure.step("–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–æ–≤ –≤ –∫–∏–Ω–æ"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π URL —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        browser.get("https://www.kinopoisk.ru/lists/movies/movies-in-cinema/")
        time.sleep(5)

    accept_cookies(browser)

    with allure.step("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"):
        try:
            WebDriverWait(browser, 15).until(
                EC.presence_of_element_located((
                    By.CSS_SELECTOR,
                    "h1, .title, [class*='movie'], [class*='film'], .content"
                ))
            )
            time.sleep(3)

            allure.attach(
                browser.get_screenshot_as_png(),
                name="cinema_movies_page",
                attachment_type=allure.attachment_type.PNG
            )
        except TimeoutException:
            # –ü—Ä–æ–≤–µ—Ä–∏–º URL –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            current_url = browser.current_url
            page_title = browser.title.lower()

            if "movies-in-cinema" in current_url or "–∫–∏–Ω–æ" in page_title:
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ø–æ URL/–∑–∞–≥–æ–ª–æ–≤–∫—É)")
            else:
                allure.attach(
                    browser.get_screenshot_as_png(),
                    name="cinema_page_timeout",
                    attachment_type=allure.attachment_type.PNG
                )
                raise AssertionError("–°—Ç—Ä–∞–Ω–∏—Ü–∞ '–§–∏–ª—å–º—ã –≤ –∫–∏–Ω–æ' –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")

    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"):
        try:
            # –ò—â–µ–º –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ñ–∏–ª—å–º–∞–º–∏
            content_elements = browser.find_elements(
                By.CSS_SELECTOR,
                "[class*='movie'], [class*='film'], .card, .item, .element,"
                "img, .poster"
            )

            if len(content_elements) > 5:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                print(
                    f"""‚úÖ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞–π–¥–µ–Ω–æ {len(content_elements)}
                      —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞""")
            else:
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page_text = browser.page_source.lower()
                if "–∫–∏–Ω–æ" in page_text or "—Ñ–∏–ª—å–º" in page_text:
                    print("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω (–ø–æ —Ç–µ–∫—Å—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã)")
                else:
                    raise AssertionError(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

        except Exception as e:
            raise AssertionError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")

    print("‚úÖ –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã '–§–∏–ª—å–º—ã –≤ –∫–∏–Ω–æ' –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    pytest.main(['-v', '-s', '--alluredir=allure-results'])